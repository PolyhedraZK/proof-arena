name: Execute Script and Create Pull Request

on:
  push:

jobs:
  execute-script-and-create-pr:
    runs-on: ubuntu-latest
    concurrency:
      group: arena-judge
      cancel-in-progress: false
    steps:
    - name: Checkout repository on machine A
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'
        token: ${{ secrets.PAT }}

    - name: Compress repository on machine A
      run: |
        zip -r repo.zip .

    - name: Install SSH key
      env:
        JUDGER_SSH_KEY: ${{ secrets.JUDGERSSH }}
      run: |
        mkdir -p ~/.ssh
        echo "$JUDGER_SSH_KEY" > ~/.ssh/judger_ssh
        chmod 600 ~/.ssh/judger_ssh

    - name: Send repository to machine B
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "mkdir -p /home/ubuntu/judger/"
        scp -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no repo.zip ubuntu@arena-worker.proof.cloud:/home/ubuntu/judger/

    - name: Send unzip instruction to machine B
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "unzip -o /home/ubuntu/judger/repo.zip -d /home/ubuntu/judger/"

    - name: Extract script path from commit message
      id: extract_path
      run: |
        COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
        SCRIPT_PATH=$(echo "$COMMIT_MSG" | grep -oP '^\[script:.*?\]' | sed 's/^\[script://;s/\]$//' || true)
        if [ -n "$SCRIPT_PATH" ]; then
          echo "SCRIPT_PATH=$SCRIPT_PATH" >> $GITHUB_OUTPUT
          echo "EXTRACTION_SUCCESS=true" >> $GITHUB_OUTPUT
          echo "Script path found: $SCRIPT_PATH"
        else
          echo "No valid script path found in commit message. Workflow will terminate gracefully."
          echo "EXTRACTION_SUCCESS=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit workflow if no valid script path found
      if: steps.extract_path.outputs.EXTRACTION_SUCCESS != 'true'
      run: |
        echo "No valid script path found or commit message format incorrect. Exiting workflow successfully."
        exit 0

    - name: Send repository to machine B
      run: |
        scp -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no repo.zip ubuntu@arena-worker.proof.cloud:/home/ubuntu/judger/

    - name: Send unzip instruction to machine B
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "unzip -o /home/ubuntu/judger/repo.zip -d /home/ubuntu/judger/"

    - name: Send script execution instruction to machine B
      if: steps.extract_path.outputs.EXTRACTION_SUCCESS == 'true'
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "
          cd /home/ubuntu/judger/
          SCRIPT_PATH='${{ steps.extract_path.outputs.SCRIPT_PATH }}'
          source /home/ubuntu/.bashrc
          go version
          if [[ -f \"\$SCRIPT_PATH\" ]]; then
            if [[ \"\$SCRIPT_PATH\" == *.sh ]]; then
              chmod +x \"\$SCRIPT_PATH\"
              ./\"\$SCRIPT_PATH\"
            elif [[ \"\$SCRIPT_PATH\" == *.py ]]; then
              python \"\$SCRIPT_PATH\"
            else
              echo \"Unsupported script type. Only .sh and .py files are allowed.\"
              exit 1
            fi
          else
            echo \"Script not found in the repository: \$SCRIPT_PATH\"
            exit 1
          fi
        "

    - name: Send zip instruction to machine B
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "
          cd /home/ubuntu/judger/
          zip -r repo_updated.zip .
        "

    - name: Retrieve updated repository from machine B
      run: |
        scp -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud:/home/ubuntu/judger/repo_updated.zip .

    - name: Unzip updated repository on machine A
      run: |
        unzip -o repo_updated.zip

    - name: Clean up machine B
      run: |
        ssh -i ~/.ssh/judger_ssh -o StrictHostKeyChecking=no ubuntu@arena-worker.proof.cloud "
          cd /home/ubuntu/
          rm -rf /home/ubuntu/judger/
        "

    - name: Check for changes
      id: check_changes
      run: |
        if git status --porcelain spj_output/ | grep -q '^??'; then
            echo "CHANGES_EXIST=true" >> $GITHUB_OUTPUT
        elif git diff --exit-code --quiet spj_output/; then
            echo "No changes detected in spj_output/"
        else
            echo "CHANGES_EXIST=true" >> $GITHUB_OUTPUT
        fi

    - name: Extract problem ID and prover name
      id: extract_info
      if: steps.check_changes.outputs.CHANGES_EXIST == 'true'
      run: |
        PROBLEM_ID=$(jq -r '.problem_id' spj_output/result.json)
        PROVER_NAME=$(jq -r '.prover_name' spj_output/result.json)
        echo "PROBLEM_ID=$PROBLEM_ID" >> $GITHUB_OUTPUT
        echo "PROVER_NAME=$PROVER_NAME" >> $GITHUB_OUTPUT

    - name: display result.json
      if: steps.check_changes.outputs.CHANGES_EXIST == 'true'
      run: |
        cat spj_output/result.json

    - name: Get current branch
      id: get_branch
      if: steps.check_changes.outputs.CHANGES_EXIST == 'true'
      run: |
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_OUTPUT

    - name: Check if submission is ready
      id: check_submission_ready
      if: steps.check_changes.outputs.CHANGES_EXIST == 'true'
      run: |
        if git log -1 --pretty=%B | grep -q "SUBMISSION_READY"; then
          echo "SUBMISSION_READY=true" >> $GITHUB_OUTPUT
        else
          echo "SUBMISSION_READY=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: |
        steps.check_changes.outputs.CHANGES_EXIST == 'true' &&
        steps.check_submission_ready.outputs.SUBMISSION_READY == 'true'
      env:
        PAT: ${{ secrets.PAT }}
      run: |
        CURRENT_BRANCH="${{ steps.get_branch.outputs.CURRENT_BRANCH }}"
        PROBLEM_ID="${{ steps.extract_problem_id.outputs.PROBLEM_ID }}"

        # Commit changes using the specified commit message format
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add .
        git commit -m "Auto-submission: Branch: $CURRENT_BRANCH"
        git push origin $CURRENT_BRANCH

        # Get current UTC time
        UTC_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

        # Prepare PR title and body
        PR_TITLE="Auto-submission: Problem ID: $PROBLEM_ID, Branch: [$CURRENT_BRANCH ($UTC_TIME)]"
        PR_BODY="This pull request was automatically created by the CI workflow. It contains updates to the spj_output/ directory after script execution.

        Please review the changes and merge if appropriate."

        # Determine base branch
        BASE_BRANCH="main"
        if ! echo "$COMMIT_MSG" | grep -q "SUBMISSION_READY"; then
          BASE_BRANCH="$CURRENT_BRANCH"
        fi

        # Create a pull request using GitHub API
        PR_RESPONSE=$(curl -X POST \
          -H "Authorization: token $PAT" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/pulls \
          -d @- << EOF
        {
          "title": "$PR_TITLE",
          "body": "$PR_BODY",
          "head": "$CURRENT_BRANCH",
          "base": "main"
        }
        EOF
        )

        PR_URL=$(echo $PR_RESPONSE | jq -r .html_url)
        if [ "$PR_URL" != "null" ]; then
          echo "Pull request created: $PR_URL"
        else
          echo "Failed to create pull request. API response:"
          echo "$PR_RESPONSE" | jq .
          exit 1
        fi
